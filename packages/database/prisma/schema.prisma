// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  passkeys      Passkey[]
  enrollments   Enrollment[] @relation("UserEnrollments")
  submissions   Submission[] @relation("SubmissionStudent")
  gradedFeedbacks Feedback[] @relation("FeedbackGrader")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  aaguid       String?

  @@map("passkey")
}


// ===========================
// LMS MVP MODELS AND ENUMS
// ===========================

enum CourseRole {
  STUDENT
  INSTRUCTOR
  TA
}

enum EnrollmentStatus {
  ACTIVE
  DROPPED
  PENDING
}

enum Language {
  PYTHON
  JAVASCRIPT
  TYPESCRIPT
  JAVA
  CPP
  C
}

enum SubmissionStatus {
  PENDING
  RUNNING
  PASSED
  FAILED
  LATE
  CANCELED
}

enum SubmissionType {
  CODE
  NOTEBOOK
  VIDEO
  TEXTBOX
  FILE_UPLOAD
}

model Course {
  id          String        @id @default(cuid())
  code        String        @unique
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt

  enrollments Enrollment[]
  assignments Assignment[]

  @@map("course")
}

model Enrollment {
  id        String            @id @default(cuid())
  userId    String
  courseId  String
  role      CourseRole        @default(STUDENT)
  status    EnrollmentStatus  @default(ACTIVE)
  joinedAt  DateTime          @default(now())

  user      User              @relation("UserEnrollments", fields: [userId], references: [id], onDelete: Cascade)
  course    Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollment")
}

model Assignment {
  id           String      @id @default(cuid())
  courseId     String
  title        String
  description  String?
  totalPoints  Int         @default(100)
  publishedAt  DateTime?
  dueAt        DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt

  course       Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  problems     Problem[]

  @@map("assignment")
}

model Problem {
  id           String             @id @default(cuid())
  assignmentId String
  title        String
  prompt       String
  starterCode  String?
  language     Language?
  maxScore     Int                @default(100)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt

  assignment   Assignment         @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  testCases    ProblemTestCase[]
  submissions  Submission[]

  @@map("problem")
}

model ProblemTestCase {
  id             String   @id @default(cuid())
  problemId      String
  input          String?
  expectedOutput String?
  hidden         Boolean  @default(false)
  points         Int      @default(0)

  problem        Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@map("problem_test_case")
}

model Submission {
  id            String           @id @default(cuid())
  problemId     String
  studentId     String
  type          SubmissionType   @default(CODE)
  status        SubmissionStatus @default(PENDING)
  language      Language?
  code          String?
  videoUrl      String?
  textContent   String?          // For TEXTBOX submissions
  runtimeMs     Int?
  score         Int?
  attemptNumber Int              @default(1)
  isLatest      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt

  problem       Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  student       User             @relation("SubmissionStudent", fields: [studentId], references: [id], onDelete: Cascade)
  notebook      NotebookSubmission?
  fileUploads   FileUpload[]
  feedbacks     Feedback[]

  @@unique([problemId, studentId, attemptNumber])
  @@index([problemId, studentId, isLatest])
  @@map("submission")
}

model NotebookSubmission {
  id           String    @id @default(cuid())
  submissionId String    @unique
  cells        Json
  metadata     Json?

  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("notebook_submission")
}

model FileUpload {
  id           String    @id @default(cuid())
  submissionId String
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  uploadedAt   DateTime  @default(now())

  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("file_upload")
}

model Feedback {
  id            String     @id @default(cuid())
  submissionId  String
  graderId      String?
  comments      String?
  rubric        Json?
  scoreDelta    Int?
  private       Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt

  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  grader        User?      @relation("FeedbackGrader", fields: [graderId], references: [id], onDelete: SetNull)

  @@map("feedback")
}